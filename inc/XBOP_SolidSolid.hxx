// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _XBOP_SolidSolid_HeaderFile
#define _XBOP_SolidSolid_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _TopoDS_Solid_HeaderFile
#include <TopoDS_Solid.hxx>
#endif
#ifndef _XBOP_ShellSolid_HeaderFile
#include <XBOP_ShellSolid.hxx>
#endif
#ifndef _Handle_XBOP_HistoryCollector_HeaderFile
#include <Handle_XBOP_HistoryCollector.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _TopAbs_State_HeaderFile
#include <TopAbs_State.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
class XBOPTools_DSFiller;
class XBOP_HistoryCollector;
class TopTools_ListOfShape;
class XBOP_ShellFaceSet;
class TopoDS_Shape;
class TopTools_DataMapOfShapeInteger;
class XBOPTColStd_IndexedDataMapOfIntegerIndexedMapOfInteger;



//!        Performs Boolean Operations  (BO) <br>
//!        Common,Cut,Fuse for solids as <br>
//!        arguments <br>
class XBOP_SolidSolid  : public XBOP_ShellSolid {
public:

  void* operator new(size_t,void* anAddress) 
  {
    return anAddress;
  }
  void* operator new(size_t size) 
  {
    return Standard::Allocate(size); 
  }
  void  operator delete(void *anAddress) 
  {
    if (anAddress) Standard::Free((Standard_Address&)anAddress); 
  }

  
//! Empty constructor; <br>
  Standard_EXPORT   XBOP_SolidSolid();
  
//! See base classes, please <br>
  Standard_EXPORT   virtual  void DoWithFiller(const XBOPTools_DSFiller& aDSF) ;
  
//! Destructor <br>
  Standard_EXPORT   virtual  void Destroy() ;
Standard_EXPORT virtual ~XBOP_SolidSolid(){Destroy();}
  
//! See base classes, please <br>
  Standard_EXPORT   virtual  void DoNewFaces() ;
  
//! See base classes, please <br>
  Standard_EXPORT   virtual  void BuildResult() ;
  
  Standard_EXPORT   virtual  void SetHistoryCollector(const Handle(XBOP_HistoryCollector)& theHistory) ;





protected:

  
  Standard_EXPORT     void PrepareReferences() ;


TopoDS_Solid myRefObject;
TopoDS_Solid myRefTool;


private:

  
  Standard_EXPORT     void PrepareSFS(const TopTools_ListOfShape& aFaces,XBOP_ShellFaceSet& aSFS) ;
  
  Standard_EXPORT     void PrepareFaceSplits() ;
  
  Standard_EXPORT     Standard_Boolean PropagateFaceStateByEdges(const TopoDS_Shape& theFace,const TopTools_DataMapOfShapeInteger& theMapOfEdgeIndex,TopAbs_State& theState) ;
  
  Standard_EXPORT     Standard_Boolean ComputeStateByInsidePoints(const Standard_Integer theFaceIndex,const Standard_Integer theBaseFaceIndex,const Standard_Integer theFaceRank,const XBOPTColStd_IndexedDataMapOfIntegerIndexedMapOfInteger& theFFMap,TopAbs_State& theState) ;
  
  Standard_EXPORT     Standard_Boolean TakeOnSplit(const Standard_Integer theFaceIndex,const Standard_Integer theBaseFaceIndex) const;




};





// other Inline functions and methods (like "C++: function call" methods)


#endif
