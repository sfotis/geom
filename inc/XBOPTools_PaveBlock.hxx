// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _XBOPTools_PaveBlock_HeaderFile
#define _XBOPTools_PaveBlock_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _XBOPTools_Pave_HeaderFile
#include <XBOPTools_Pave.hxx>
#endif
#ifndef _XIntTools_Range_HeaderFile
#include <XIntTools_Range.hxx>
#endif
#ifndef _XIntTools_ShrunkRange_HeaderFile
#include <XIntTools_ShrunkRange.hxx>
#endif
#ifndef _XIntTools_Curve_HeaderFile
#include <XIntTools_Curve.hxx>
#endif
#ifndef _XBOPTools_PointBetween_HeaderFile
#include <XBOPTools_PointBetween.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
class XBOPTools_Pave;
class XIntTools_ShrunkRange;
class XBOPTools_PointBetween;
class XIntTools_Curve;
class XIntTools_Range;



//!  Class for storing info about a couple <br>
//! of neighbouring paves on an edge <br>
class XBOPTools_PaveBlock  {
public:

  void* operator new(size_t,void* anAddress) 
  {
    return anAddress;
  }
  void* operator new(size_t size) 
  {
    return Standard::Allocate(size); 
  }
  void  operator delete(void *anAddress) 
  {
    if (anAddress) Standard::Free((Standard_Address&)anAddress); 
  }

  
//! Empty constructor <br>
  Standard_EXPORT   XBOPTools_PaveBlock();
  
//! Constructor <br>
//! Index  - DS-index of the edge <br>
//! aPave1 - one pave <br>
//! aPave2 - other pave <br>
  Standard_EXPORT   XBOPTools_PaveBlock(const Standard_Integer anEdge,const XBOPTools_Pave& aPave1,const XBOPTools_Pave& aPave2);
  
//! Modifier <br>
//! Sets DS-index for the edge that is between aPave1 and aPave2 <br>
  Standard_EXPORT     void SetEdge(const Standard_Integer anEdge) ;
  
//! Modifier <br>
//! Sets DS-index for the edge from which this pave block comes from <br>
  Standard_EXPORT     void SetOriginalEdge(const Standard_Integer anEdge) ;
  
//! Modifier <br>
  Standard_EXPORT     void SetPave1(const XBOPTools_Pave& aPave) ;
  
//! Modifier <br>
  Standard_EXPORT     void SetPave2(const XBOPTools_Pave& aPave) ;
  
//! Modifier <br>
//! Sets the Shrunk Range for the pave block <br>
  Standard_EXPORT     void SetShrunkRange(const XIntTools_ShrunkRange& aSR) ;
  
//! Modifier <br>
//! Sets the point between the paves for the pave block <br>
  Standard_EXPORT     void SetPointBetween(const XBOPTools_PointBetween& aP) ;
  
//! Modifier <br>
//! Sets the intersection curve to which the pave block belongs to <br>
  Standard_EXPORT     void SetCurve(const XIntTools_Curve& aC) ;
  
//! Modifier <br>
//! Sets the DS-index of the first face <br>
  Standard_EXPORT     void SetFace1(const Standard_Integer nF1) ;
  
//! Modifier <br>
//! Sets the DS-index of the second face <br>
  Standard_EXPORT     void SetFace2(const Standard_Integer nF2) ;
  
//! Selector <br>
  Standard_EXPORT     Standard_Integer Edge() const;
  
//! Selector <br>
  Standard_EXPORT     Standard_Integer OriginalEdge() const;
  
//! Selector <br>
  Standard_EXPORT    const XBOPTools_Pave& Pave1() const;
  
//! Selector <br>
  Standard_EXPORT    const XBOPTools_Pave& Pave2() const;
  
//! Returns  TRUE if both paves have vertex index !=0 <br>
  Standard_EXPORT     Standard_Boolean IsValid() const;
  
//! Returns  TRUE if <Other> is  equal to me <br>
  Standard_EXPORT     Standard_Boolean IsEqual(const XBOPTools_PaveBlock& Other) const;
  
//! Returns values for paves' parameters <br>
  Standard_EXPORT     void Parameters(Standard_Real& aT1,Standard_Real& aT2) const;
  
//! Returns parmetric range for paves' parameters <br>
  Standard_EXPORT    const XIntTools_Range& Range() const;
  
//! Selector <br>
  Standard_EXPORT    const XIntTools_ShrunkRange& ShrunkRange() const;
  
//! Selector <br>
  Standard_EXPORT    const XBOPTools_PointBetween& PointBetween() const;
  
//! Selector <br>
  Standard_EXPORT    const XIntTools_Curve& Curve() const;
  
//! Selector <br>
  Standard_EXPORT     Standard_Integer Face1() const;
  
//! Selector <br>
  Standard_EXPORT     Standard_Integer Face2() const;
  
  Standard_EXPORT     Standard_Boolean IsInBlock(const XBOPTools_Pave& aPaveX) const;





protected:





private:



Standard_Integer myEdge;
Standard_Integer myOriginalEdge;
XBOPTools_Pave myPave1;
XBOPTools_Pave myPave2;
XIntTools_Range myRange;
XIntTools_ShrunkRange myShrunkRange;
XIntTools_Curve myCurve;
Standard_Integer myFace1;
Standard_Integer myFace2;
XBOPTools_PointBetween myPointBetween;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
