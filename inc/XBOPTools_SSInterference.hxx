// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _XBOPTools_SSInterference_HeaderFile
#define _XBOPTools_SSInterference_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _XBOPTools_ListOfPaveBlock_HeaderFile
#include <XBOPTools_ListOfPaveBlock.hxx>
#endif
#ifndef _XBOPTools_PaveSet_HeaderFile
#include <XBOPTools_PaveSet.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _XBOPTools_SequenceOfCurves_HeaderFile
#include <XBOPTools_SequenceOfCurves.hxx>
#endif
#ifndef _XIntTools_SequenceOfPntOn2Faces_HeaderFile
#include <XIntTools_SequenceOfPntOn2Faces.hxx>
#endif
#ifndef _TColStd_ListOfInteger_HeaderFile
#include <TColStd_ListOfInteger.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _XBOPTools_IndexedDataMapOfIntegerState_HeaderFile
#include <XBOPTools_IndexedDataMapOfIntegerState.hxx>
#endif
#ifndef _XBOPTools_ShapeShapeInterference_HeaderFile
#include <XBOPTools_ShapeShapeInterference.hxx>
#endif
class XIntTools_SequenceOfCurves;
class XIntTools_SequenceOfPntOn2Faces;
class XBOPTools_PaveBlock;
class XBOPTools_ListOfPaveBlock;
class XBOPTools_PaveSet;
class XBOPTools_SequenceOfCurves;
class XBOPTools_IndexedDataMapOfIntegerState;
class TColStd_ListOfInteger;


//! class for storing a Face/Face interference <br>
//!         Each  F/F interference  contains  information  about <br>
//!         1.  myPBs   - PaveBlocks (made from edges from the faces <br>
//!             that are IN-2D or ON-2D; <br>
//!         2.  myCurves- Sequence of curves of intersection; <br>
//!         3.  myTangentFacesFlag  - The BOOL flag indicates that <br>
//!             the  faces are SD in terms of the F/F Intersector. <br>
//!         4.  mySenseFlag  - value that is equal +1 or -1 depending <br>
//!             on scalar product between normals to each face.  This <br>
//!             valie is valid for the SDF only. <br>
//!         5.  myAlonePnts  - contains 3D-points that are place <br>
//!             of  intersection between the two faces <br>
//!         6.  myAloneVertices   - contains indices of vertices <br>
//!             that correspond to the points  myAlonePnts; <br>
class XBOPTools_SSInterference  : public XBOPTools_ShapeShapeInterference {
public:

  void* operator new(size_t,void* anAddress) 
  {
    return anAddress;
  }
  void* operator new(size_t size) 
  {
    return Standard::Allocate(size); 
  }
  void  operator delete(void *anAddress) 
  {
    if (anAddress) Standard::Free((Standard_Address&)anAddress); 
  }

  
//! Empty constructor <br>
  Standard_EXPORT   XBOPTools_SSInterference();
  
//! Constructor <br>
//! anIndex1, <br>
//! anIndex2 see XBOPTools_ShapeShapeInterference for details <br>
//! aTolR3D  - value of tolerance to reach in 3D-space <br>
//! aTolR2D  - value of tolerance to reach in 2D-space <br>
//! aCurves  see  XIntTools_Curve  for details,  please <br>
  Standard_EXPORT   XBOPTools_SSInterference(const Standard_Integer anIndex1,const Standard_Integer anIndex2,const Standard_Real aTolR3D,const Standard_Real aTolR2D,const XIntTools_SequenceOfCurves& aCurves,const XIntTools_SequenceOfPntOn2Faces& aPnts);
  
//! Modifier <br>
  Standard_EXPORT     void AppendBlock(const XBOPTools_PaveBlock& aPB) ;
  
//! Selector <br>
  Standard_EXPORT    const XBOPTools_ListOfPaveBlock& PaveBlocks() const;
  
//! Selector <br>
  Standard_EXPORT     XBOPTools_PaveSet& NewPaveSet() ;
  
//! Selector <br>
  Standard_EXPORT     Standard_Real TolR3D() const;
  
//! Selector <br>
  Standard_EXPORT     Standard_Real TolR2D() const;
  
//! Selector <br>
  Standard_EXPORT     XBOPTools_SequenceOfCurves& Curves() ;
  
//! Modifier <br>
  Standard_EXPORT     void SetTangentFacesFlag(const Standard_Boolean aFlag) ;
  
//! Selector <br>
  Standard_EXPORT     Standard_Boolean IsTangentFaces() const;
  
//! Modifier <br>
  Standard_EXPORT     void SetSenseFlag(const Standard_Integer aFlag) ;
  
//! Selector <br>
  Standard_EXPORT     Standard_Integer SenseFlag() const;
  
//! Modifier <br>
  Standard_EXPORT     void SetStatesMap(const XBOPTools_IndexedDataMapOfIntegerState& aStatesMap) ;
  
//! Selector <br>
  Standard_EXPORT    const XBOPTools_IndexedDataMapOfIntegerState& StatesMap() const;
  
//! Modifier <br>
  Standard_EXPORT     void SetAlonePnts(const XIntTools_SequenceOfPntOn2Faces& aPnts) ;
  
//! Selector <br>
  Standard_EXPORT    const XIntTools_SequenceOfPntOn2Faces& AlonePnts() const;
  
//! Selector <br>
//! <br>
  Standard_EXPORT     TColStd_ListOfInteger& AloneVertices() ;
  
//! Modifier <br>
//! <br>
  Standard_EXPORT     void SetSharedEdges(const TColStd_ListOfInteger& aLS) ;
  
//! Selector <br>
//! <br>
  Standard_EXPORT    const TColStd_ListOfInteger& SharedEdges() const;





protected:



XBOPTools_ListOfPaveBlock myPBs;
XBOPTools_PaveSet myNewPaveSet;
Standard_Real myTolR3D;
Standard_Real myTolR2D;
XBOPTools_SequenceOfCurves myCurves;
XIntTools_SequenceOfPntOn2Faces myAlonePnts;
TColStd_ListOfInteger myAloneVertices;
Standard_Boolean myTangentFacesFlag;
Standard_Integer mySenseFlag;
XBOPTools_IndexedDataMapOfIntegerState myStatesMap;
TColStd_ListOfInteger mySharedEdges;


private:





};





// other Inline functions and methods (like "C++: function call" methods)


#endif
