// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _XIntTools_Array1OfRoots_HeaderFile
#define _XIntTools_Array1OfRoots_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Standard_Address_HeaderFile
#include <Standard_Address.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
class Standard_RangeError;
class Standard_DimensionMismatch;
class Standard_OutOfRange;
class Standard_OutOfMemory;
class XIntTools_Root;



class XIntTools_Array1OfRoots  {
public:

  void* operator new(size_t,void* anAddress) 
  {
    return anAddress;
  }
  void* operator new(size_t size) 
  {
    return Standard::Allocate(size); 
  }
  void  operator delete(void *anAddress) 
  {
    if (anAddress) Standard::Free((Standard_Address&)anAddress); 
  }

  
  Standard_EXPORT   XIntTools_Array1OfRoots(const Standard_Integer Low,const Standard_Integer Up);
  
  Standard_EXPORT   XIntTools_Array1OfRoots(const XIntTools_Root& Item,const Standard_Integer Low,const Standard_Integer Up);
  
  Standard_EXPORT     void Init(const XIntTools_Root& V) ;
  
  Standard_EXPORT     void Destroy() ;
~XIntTools_Array1OfRoots()
{
  Destroy();
}
  
        Standard_Boolean IsAllocated() const;
  
  Standard_EXPORT    const XIntTools_Array1OfRoots& Assign(const XIntTools_Array1OfRoots& Other) ;
   const XIntTools_Array1OfRoots& operator =(const XIntTools_Array1OfRoots& Other) 
{
  return Assign(Other);
}
  
        Standard_Integer Length() const;
  
        Standard_Integer Lower() const;
  
        Standard_Integer Upper() const;
  
        void SetValue(const Standard_Integer Index,const XIntTools_Root& Value) ;
  
       const XIntTools_Root& Value(const Standard_Integer Index) const;
     const XIntTools_Root& operator ()(const Standard_Integer Index) const
{
  return Value(Index);
}
  
        XIntTools_Root& ChangeValue(const Standard_Integer Index) ;
      XIntTools_Root& operator ()(const Standard_Integer Index) 
{
  return ChangeValue(Index);
}





protected:





private:

  
  Standard_EXPORT   XIntTools_Array1OfRoots(const XIntTools_Array1OfRoots& AnArray);


Standard_Integer myLowerBound;
Standard_Integer myUpperBound;
Standard_Address myStart;
Standard_Boolean isAllocated;


};

#define Array1Item XIntTools_Root
#define Array1Item_hxx <XIntTools_Root.hxx>
#define TCollection_Array1 XIntTools_Array1OfRoots
#define TCollection_Array1_hxx <XIntTools_Array1OfRoots.hxx>

#include <TCollection_Array1.lxx>

#undef Array1Item
#undef Array1Item_hxx
#undef TCollection_Array1
#undef TCollection_Array1_hxx


// other Inline functions and methods (like "C++: function call" methods)


#endif
